{
    "collab_server" : "",
    "contents" : "---\ntitle: \"MFA Vignette\"\ndate: \"`r Sys.Date()`\"\noutput: \n  rmarkdown::html_vignette\nvignette: >\n  %\\VignetteIndexEntry{Vignette Title}\n  %\\VignetteEngine{knitr::rmarkdown}\n  %\\VignetteEncoding{UTF-8}\n---\n\nLoad the package:\n```{r}\nlibrary(mfa)\n```\n\n## Construct Function\n\nHere is how to create an MFA object based on the wine dataset:\n```{r}\n# read data\nurl=\"https://raw.githubusercontent.com/ucb-stat243/stat243-fall-2016/master/problem-sets/final-project/data/wines.csv\" \ndata=read.csv(file=url, header = TRUE, sep = \",\")\n# exclude the first column since it is not numeric\ndatanum <- data[,-1]\n\n# a list of numeric vectors with the position of the active variables\n# to partition the grand table into 10 subtables\nsets <- list(1:6, 7:12, 13:18, 19:23, 24:29, 30:34, 35:38, 39:44, 45:49, 50:53)\n\n# create object 'wine' of class mfa\nwine <- mfa_gen(data = datanum, sets = sets, ncomps = 2)\n```\n\nThe wine object is a list with the following elements:\n- \"sets\": user-defined list of vectors with the position of active variables to partition the grand table into subtables\n- \"eigenvalues\": vector of eigenvalues with the length of user-defined `ncomps`\n- \"FactorScore\": factor score of Generalized Singular Value Decomposition (GSVD)\n- \"Loadings\" : variable loadings of GSVD\n- \"PartialFactorScores\": list of partical factor scores of subtables\n- \"MatrixA\": diagnal matrix of the inversed squared singular values \n\n\n## Print Method\n\nThe print method is designed to print out an MFA object's eigenvalues, and partial factor scores of a subtable if the user specifies the index of the subtable as the argument `subtale`. By default, `subtable = NULL`, and the partial factore scores are not presented.\n\nHere is how to print the eigenvalues of the MFA object wine:\n```{r}\nprint(wine)\n```\n\nHere is how to print the eigenvalues and the partical factor scores for the $6^{th}$ subtable:\n```{r}\nprint(wine, subtable = 6)\n```\n\n\n## Plot Method\n\nGiven the indices of extracted PCs as 2 dimensions (argument `dim1`, `dim2`), the plot method plots graphs of:\n- factor scores (the compromise of the tables) if argument `type = 1`\n- partial factor scores if argument `type = 2`\n- variable loadings if argument `type = 3`\n- partial factor scores and variable loadings if argument `type = 4`\n\nTo adjust the scale of the graphs, change the value of arguments `scale_x`, `scale_y`. \n\nThe `text` argument allows users to define lables for variables as a vector.\n\nThe `cat` argument allows users to define categories to group the observations as a vector.\n\nThe `var` argument allows users to indicate the graphs of specific subtables as a numerical vector of the indices of subtables.\n\nHere is how to plot the partial factor scores (type = 2) for the 8th subtable with the categories to group the observations:\n```{r, dpi=180, fig.align='center'}\nlibrary(ggplot2)\nlibrary(grid)\nlibrary(gridExtra)\n\n# define the categories to group the observations\ncat <- list(\"New Zealand\" = 1:4, \"Canada\" = 5:8, \"France\" = 9:12)\n\nplot(mfa = wine, dim1 = 1, dim2 = 2, type = 2, cat = cat, var = 8)\n```\n\nHere is how to plot the variable loadings (type = 3) for the 3rd subtable without labels for variables:\n```{r, dpi=180, fig.align='center'}\nplot(mfa = wine, dim1 = 1, dim2 = 2, type = 3, var = 3)\n```\n\nPlot the variable loadings (type = 3) for the 6th subtable with labels (defined by users) for variables:\n```{r, dpi=180, fig.align='center'}\n# define the labels for variables\ndftext <- c(\"Cat Pee\", \"Passion Fruit\", \"Green Pepper\", \"Mineral\", \n            \"Smoky\", \"Cirtrus\", \"Cat Pee\", \"Passion Fruit\", \"Green Pepper\",\n            \"Mineral\",\"Tropical\", \"Leafy\", \"Cat Pee\", \"Passion Fruit\", \n            \"Green Pepper\", \"Mineral\", \"Grassy\", \"Flinty\", \"Cat Pee\", \n            \"Passion Fruit\", \"Green Pepper\", \"Mineral\", \"Leafy\", \"Cat Pee\",\n            \"Passion Fruit\", \"Green Pepper\", \"Mineral\", \"Vegetal\", \"Hay\", \n            \"Cat Pee\", \"Passion Fruit\", \"Green Pepper\", \"Mineral\", \"Melon\", \n            \"Cat Pee\", \"Passion Fruit\", \"Green Pepper\", \"Mineral\", \"Cat Pee\", \n            \"Passion Fruit\", \"Green Pepper\", \"Mineral\", \"Grass\", \"Smoky\", \n            \"Cat Pee\", \"Passion Fruit\", \"Green Pepper\", \"Mineral\", \"Peach\", \n            \"Cat Pee\", \"Passion Fruit\", \"Green Pepper\", \"Mineral\")\n\nplot(mfa = wine, dim1 = 1, dim2 = 2, type = 3, text = dftext, var = 6)\n```\n\nPlot the partial factor scores and variable loadings (type = 4) for the 1st subtable with the categories to group the observations:\n```{r, dpi=180, fig.align='center'}\nplot(mfa = wine, type = 4, cat = cat, scale_x = 1/0.8, scale_y = 1/0.4, var = 1)\n```\n\n\n## Eigenvalue Summary\n\nThe `eigenval` method creates a table that summarizes information about the obtained eigenvalues of the object wine. \n\nHere is how to use it:\n```{r}\neigenval(wine)\n```\n\n\n## Contributions\n\nThe `contri_obs` method calculates and present the contribution of observations to the extracted components (dimensions). The [i,j] element of the printed matrix is the contribution of the ith observation to the jth component. \n\nHere is how to use it:\n```{r}\ncontri_obs(wine)\n```\n\nThe `contri_var` method calculates and present the contribution of variables to the extracted components (dimensions). The [i,j] element of the printed matrix is the contribution of the ith variable to the jth component. \n\nHere is how to use it:\n```{r}\ncontri_var(wine)\n```\n\nThe `contri_table` method calculates and present the contribution of subtables to the extracted components (dimensions). The [i,j] element of the printed matrix is the contribution of the ith subtable to the jth component. \n\nHere is how to use it:\n```{r}\ncontri_table(wine)\n```\n\n\n## RV coefficients and Lg coefficients\n\nRV() function calculates the Rv coefficient between 2 specific tables.\n\n```{r}\n# define 2 tables\nt1 <- matrix(c(2, 4, 3, 1, 5, 7))\nt2 <- matrix(c(1, 8, 9, 10, 4, 6))\n\n# calculate the Rv coefficient between t1 and t2\nRV(table1 = t1, table2 = t2)\n```\n\n\nTo calculate the Rv coefficients between the specified subtables in a grand table (datanum):\n```{r}\nRV_table(datanum, sets = list(sets[[1]], sets[[2]]))\n```\n\n\nTo calculate the Lg coefficients between the specified subtables in a grand table (datanum):\n```{r}\nLg_table(datanum, sets = list(sets[[1]], sets[[2]]))\n```\n\n## Bootstrap\n\nThe bootstrap function performs bootstrap by `L` times, and get L estimated bootstrapped factor scores. The grand table `dataset` is partitioned by argument `userset`. The bootstrap ratios of observations are calculated accordingly. These ratios can be used to find the observation that reliably contribute to a given component. \n\nHere is how to perform 1000 bootstrap and get the bootstrap ratios of the 12 wines.\n```{r}\n# a list of numeric vectors with the position of the active variables\n# to partition the grand table into 10 subtables\nsets <- list(1:6, 7:12, 13:18, 19:23, 24:29, 30:34, 35:38, 39:44, 45:49, 50:53)\n\nbootstrap(L = 1000, userset = sets, dataset = datanum, ncomp = 2)\n```\n",
    "created" : 1480891297994.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2771931814",
    "id" : "65A61B20",
    "lastKnownWriteTime" : 1480661719,
    "last_content_update" : 1480891649621,
    "path" : "~/Dropbox/stat 243 final/MFA/vignettes/my-vignette.Rmd",
    "project_path" : "vignettes/my-vignette.Rmd",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}